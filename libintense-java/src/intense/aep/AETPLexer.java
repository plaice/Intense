/* The following code was generated by JFlex 1.4 on 10/6/04 6:07 PM */

/*
 ******************************************************************************

 AETP.jflex

 Lexer for AETPClient AEPClient.Tokens.

 Built with the following lines from the Intense Project Java distribution
 GNU Makefile:

 src/intense/aep/AETPLexer.java : src/intense/aep/AETP.jflex
        cd src/intense/aep; java -classpath ../../../ext/JFlex.jar JFlex.Main \
        AETP.jflex

 Copyright 2001, 2004 Paul Swoboda.

 This file is part of the Intense project.

 Intense is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 Intense is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Intense; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

 ******************************************************************************
 */


package intense.aep;


import java.io.*;
import intense.*;
import intense.log.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 10/6/04 6:07 PM from the specification file
 * <tt>AETP.jflex</tt>
 */
class AETPLexer implements intense.IntenseLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 1024;

  /** lexical states */
  public static final int AFTER_STRING = 4;
  public static final int IN_CONTEXT = 5;
  public static final int IN_STRING = 3;
  public static final int IN_TOKEN = 1;
  public static final int YYINITIAL = 0;
  public static final int IN_DIMENSION = 2;
  public static final int IN_CONTEXT_BINARY_STRING = 6;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0, 22, 19, 17,  3, 18, 21, 20,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 23, 52,  0,  0,  0,  0,  0,  0,  0, 54,  0, 26, 53,  0, 
     5, 15,  9, 10, 15,  7, 15, 11,  6,  6, 25, 45, 57,  0, 58,  0, 
     0, 39, 50, 31, 33, 36, 38, 40, 32, 34, 46, 44, 42, 49, 30, 35, 
    41, 51, 43, 28, 37,  4, 47, 51, 48, 29, 51, 59,  2, 24, 56, 27, 
     0, 14, 13,  8, 13, 12, 16, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,  0,  0,  0, 55,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\10\0\1\3\1\4\13\0\1\5"+
    "\1\6\1\0\1\7\1\10\1\0\1\11\1\12\1\0"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\2\1\1\2\27"+
    "\1\30\1\31\1\32\1\5\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\14\0\1\43\6\0\1\44"+
    "\4\0\1\45\1\46\1\7\2\47\1\50\3\51\2\27"+
    "\1\52\1\53\2\1\1\54\1\14\6\0\1\55\10\0"+
    "\1\56\1\57\1\60\11\0\1\27\1\1\1\0\1\27"+
    "\2\1\1\61\4\0\1\62\3\0\1\63\1\64\1\65"+
    "\5\0\1\66\1\67\1\70\1\67\1\71\1\1\1\0"+
    "\1\1\1\72\1\0\1\73\2\0\1\74\1\75\13\0"+
    "\1\76\1\0\1\77\1\100\1\0\1\101\2\0\1\102"+
    "\1\70\1\102\1\71\1\0\1\103\12\0\1\104\1\105"+
    "\1\70\1\105\1\71\1\0\1\106\6\0\1\107\1\110"+
    "\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u03fc\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u06cc\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u06cc"+
    "\0\u08ac\0\u06cc\0\u06cc\0\u06cc\0\u06cc\0\u06cc\0\u06cc\0\u06cc"+
    "\0\u0834\0\u06cc\0\u06cc\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u06cc\0\u0a50\0\u08e8\0\u06cc\0\u06cc\0\u0960\0\u0960"+
    "\0\u06cc\0\u06cc\0\u06cc\0\u06cc\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u06cc\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u06cc"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u06cc\0\u06cc\0\u0fb4\0\u06cc"+
    "\0\u0ff0\0\u06cc\0\u08e8\0\u0960\0\u06cc\0\u102c\0\u1068\0\u06cc"+
    "\0\u06cc\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u06cc\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u06cc\0\u06cc\0\u06cc\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u0960\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u06cc\0\u1950\0\u198c\0\u19c8\0\u06cc"+
    "\0\u06cc\0\u06cc\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u06cc"+
    "\0\u1b30\0\u1b6c\0\u1b6c\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u06cc"+
    "\0\u1c5c\0\u06cc\0\u1c98\0\u1cd4\0\u06cc\0\u06cc\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c"+
    "\0\u1f68\0\u06cc\0\u1fa4\0\u06cc\0\u06cc\0\u1fe0\0\u06cc\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u20d0\0\u20d0\0\u210c\0\u06cc\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u06cc\0\u23a0\0\u23dc\0\u23dc\0\u23dc\0\u2418\0\u06cc"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u06cc\0\u06cc"+
    "\0\u06cc\0\u06cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\10\1\11\4\0\1\10\3\0\3\10"+
    "\1\0\1\10\1\11\2\10\1\11\2\10\1\0\1\10"+
    "\2\0\1\10\1\12\1\0\1\13\1\14\1\0\1\15"+
    "\5\0\1\16\2\0\1\17\1\0\1\20\1\10\1\21"+
    "\5\0\10\10\1\0\1\11\1\0\1\11\1\0\3\22"+
    "\1\0\3\22\3\0\1\22\1\0\1\11\2\0\1\11"+
    "\2\0\1\23\2\0\1\24\1\0\1\25\1\0\1\26"+
    "\1\27\1\0\1\30\1\31\1\32\1\33\2\0\1\34"+
    "\1\0\1\35\1\0\1\36\1\20\1\37\17\0\1\11"+
    "\1\0\1\11\1\40\1\41\2\42\1\40\3\42\3\40"+
    "\1\42\1\40\1\11\2\0\1\11\2\0\1\43\2\0"+
    "\1\44\22\40\1\0\6\40\10\0\1\45\1\46\1\47"+
    "\1\50\1\45\3\51\1\45\3\51\3\45\1\51\1\45"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\3\61"+
    "\31\45\1\61\1\45\6\61\1\62\1\11\1\62\1\11"+
    "\15\62\1\11\2\62\1\11\2\62\1\43\1\62\1\63"+
    "\42\62\1\64\1\65\1\66\1\11\1\64\1\67\2\70"+
    "\1\64\3\70\3\64\1\70\1\64\1\11\2\66\1\11"+
    "\2\66\1\71\1\72\1\0\1\73\22\64\1\74\6\64"+
    "\1\75\1\64\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\11\1\104\1\11\1\104\14\105\1\11\2\104"+
    "\1\11\12\104\1\105\1\104\1\105\2\104\1\105\1\104"+
    "\2\105\12\104\1\105\11\104\1\10\1\0\1\10\5\0"+
    "\1\10\3\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\2\0\1\10\21\0\1\10\6\0"+
    "\10\10\1\0\1\11\1\0\1\11\15\0\1\11\2\0"+
    "\1\11\104\0\1\106\101\0\1\107\102\0\1\110\63\0"+
    "\1\111\1\0\1\112\63\0\1\113\2\0\1\114\11\0"+
    "\1\115\66\0\1\116\71\0\1\117\74\0\1\120\35\0"+
    "\3\22\1\0\3\22\3\0\1\22\103\0\1\121\110\0"+
    "\1\122\72\0\1\123\73\0\1\124\6\0\1\125\63\0"+
    "\1\126\67\0\1\127\106\0\1\130\102\0\1\131\47\0"+
    "\1\113\14\0\1\115\65\0\1\132\7\0\1\133\63\0"+
    "\1\134\130\0\15\40\10\0\1\135\1\0\22\40\1\0"+
    "\6\40\14\0\1\40\3\41\1\40\3\41\3\40\1\41"+
    "\1\40\12\0\22\40\1\0\6\40\14\0\1\40\3\42"+
    "\1\40\3\42\3\40\1\42\1\40\10\0\1\136\1\0"+
    "\22\40\1\0\6\40\16\0\2\137\1\0\3\137\3\0"+
    "\1\137\54\0\1\45\3\0\15\45\12\0\31\45\1\0"+
    "\1\45\7\0\1\61\26\0\3\61\31\0\1\61\1\0"+
    "\6\61\3\140\1\0\1\141\67\140\1\45\3\0\1\45"+
    "\3\51\1\45\3\51\3\45\1\51\1\45\12\0\31\45"+
    "\1\0\1\45\6\0\1\64\2\66\1\0\15\64\1\0"+
    "\2\66\1\0\2\66\2\0\1\142\1\66\31\64\1\0"+
    "\1\64\1\0\2\66\3\0\1\66\1\65\1\66\1\11"+
    "\15\66\1\11\2\66\1\11\2\66\3\0\32\66\1\0"+
    "\1\66\1\0\2\66\3\0\3\66\1\0\15\66\1\0"+
    "\2\66\1\0\2\66\3\0\32\66\1\0\1\66\1\0"+
    "\2\66\3\0\1\143\2\144\1\145\1\143\3\67\1\143"+
    "\3\67\1\146\2\143\1\67\1\143\1\145\2\144\1\145"+
    "\2\144\2\145\1\142\1\144\11\143\1\146\17\143\1\145"+
    "\1\147\1\145\2\144\3\145\1\143\2\144\1\145\1\143"+
    "\3\70\1\143\3\70\1\146\2\143\1\70\1\143\1\145"+
    "\2\144\1\145\2\144\2\145\1\150\1\144\11\143\1\146"+
    "\17\143\1\145\1\147\1\145\2\144\3\145\27\0\1\151"+
    "\44\0\3\66\1\0\1\66\1\152\2\153\1\66\3\153"+
    "\3\66\1\153\1\66\1\0\2\66\1\0\2\66\3\0"+
    "\1\154\31\66\1\0\1\66\1\0\2\66\10\0\14\155"+
    "\16\0\1\155\1\0\1\155\2\0\1\155\1\0\2\155"+
    "\12\0\1\155\47\0\1\156\102\0\1\157\72\0\1\160"+
    "\63\0\1\161\75\0\1\162\71\0\1\163\113\0\1\164"+
    "\70\0\1\165\71\0\1\166\63\0\1\167\76\0\1\170"+
    "\103\0\1\171\66\0\1\172\64\0\1\173\77\0\1\174"+
    "\1\0\1\160\110\0\1\175\57\0\1\176\73\0\1\177"+
    "\62\0\1\200\103\0\1\201\72\0\1\202\35\0\3\137"+
    "\1\0\3\137\3\0\1\137\11\0\1\136\47\0\1\203"+
    "\1\204\1\205\1\204\1\206\1\207\1\210\5\204\16\0"+
    "\1\204\1\0\1\204\2\0\1\204\1\0\2\204\12\0"+
    "\1\204\11\0\1\64\2\66\1\0\1\64\3\211\1\64"+
    "\3\211\3\64\1\211\1\64\1\0\2\66\1\0\2\66"+
    "\2\0\1\142\1\212\31\64\1\0\1\64\1\213\2\66"+
    "\3\0\1\64\2\66\1\0\1\64\3\214\1\64\3\214"+
    "\3\64\1\214\1\64\1\0\2\66\1\0\2\66\2\0"+
    "\1\142\1\66\31\64\1\0\1\64\1\0\2\66\3\0"+
    "\3\144\1\145\1\144\3\152\1\144\3\152\1\215\2\144"+
    "\1\152\1\144\1\145\2\144\1\145\2\144\2\145\1\0"+
    "\12\144\1\215\17\144\1\145\1\216\1\145\2\144\3\145"+
    "\3\144\1\145\1\144\3\153\1\144\3\153\1\215\2\144"+
    "\1\153\1\144\1\145\2\144\1\145\2\144\2\145\1\150"+
    "\12\144\1\215\17\144\1\145\1\216\1\145\2\144\3\145"+
    "\3\66\1\0\15\66\1\0\2\66\1\0\2\66\3\0"+
    "\1\217\31\66\1\0\1\66\1\0\2\66\10\0\14\105"+
    "\16\0\1\105\1\0\1\105\2\0\1\105\1\0\2\105"+
    "\12\0\1\105\50\0\1\220\76\0\1\221\100\0\1\222"+
    "\63\0\1\223\71\0\1\224\100\0\1\225\103\0\1\226"+
    "\100\0\1\227\70\0\1\230\55\0\1\231\103\0\1\232"+
    "\67\0\1\233\76\0\1\234\72\0\1\235\74\0\1\236"+
    "\74\0\1\237\72\0\1\240\33\0\1\241\1\242\1\243"+
    "\1\242\2\243\1\242\1\243\2\242\2\243\16\0\1\242"+
    "\1\0\1\242\2\0\1\243\1\0\1\243\1\242\12\0"+
    "\1\242\16\0\14\243\16\0\1\243\1\0\1\243\2\0"+
    "\1\243\1\0\2\243\12\0\1\243\16\0\3\243\1\242"+
    "\3\243\2\242\3\243\16\0\1\242\1\0\1\242\2\0"+
    "\1\242\1\0\2\243\12\0\1\242\16\0\1\242\3\243"+
    "\2\242\2\243\1\242\3\243\16\0\1\243\1\0\1\242"+
    "\2\0\1\243\1\0\2\243\12\0\1\242\16\0\3\244"+
    "\1\242\3\244\1\242\1\243\1\242\1\244\1\243\16\0"+
    "\1\242\1\0\1\243\2\0\1\242\1\0\1\243\1\242"+
    "\12\0\1\243\16\0\7\243\1\242\4\243\16\0\1\243"+
    "\1\0\1\243\2\0\1\242\1\0\2\243\12\0\1\243"+
    "\11\0\1\143\2\144\1\145\1\143\3\211\1\143\3\211"+
    "\1\64\2\143\1\211\1\143\1\145\2\144\1\145\2\144"+
    "\2\145\1\142\1\144\11\143\1\64\17\143\1\145\1\64"+
    "\1\145\2\144\3\145\3\66\1\0\1\66\3\245\1\66"+
    "\3\245\3\66\1\245\1\66\1\0\2\66\1\0\2\66"+
    "\3\0\32\66\1\0\1\66\1\0\2\66\10\0\3\246"+
    "\1\0\3\246\3\0\1\246\54\0\1\143\2\144\1\145"+
    "\1\143\3\214\1\143\3\214\1\146\2\143\1\214\1\143"+
    "\1\145\2\144\1\145\2\144\2\145\1\142\1\144\11\143"+
    "\1\146\17\143\1\145\1\64\1\145\2\144\3\145\3\66"+
    "\1\0\1\66\3\245\1\66\3\245\3\66\1\245\1\66"+
    "\1\0\2\66\1\0\2\66\3\0\1\212\31\66\1\0"+
    "\1\66\1\213\2\66\3\0\3\66\1\0\1\66\3\247"+
    "\1\66\3\247\3\66\1\247\1\66\1\0\2\66\1\0"+
    "\2\66\3\0\32\66\1\0\1\66\1\0\2\66\43\0"+
    "\1\250\101\0\1\251\100\0\1\252\63\0\1\253\100\0"+
    "\1\254\60\0\1\255\102\0\1\256\75\0\1\257\71\0"+
    "\1\260\65\0\1\261\103\0\1\262\71\0\1\263\34\0"+
    "\1\264\1\265\1\266\1\265\1\267\1\270\1\271\5\265"+
    "\16\0\1\265\1\0\1\265\2\0\1\265\1\0\2\265"+
    "\12\0\1\265\16\0\14\265\16\0\1\265\1\0\1\265"+
    "\2\0\1\265\1\0\2\265\12\0\1\265\11\0\3\144"+
    "\1\145\1\144\3\245\1\144\3\245\1\66\2\144\1\245"+
    "\1\144\1\145\2\144\1\145\2\144\2\145\1\0\12\144"+
    "\1\66\17\144\1\145\1\66\1\145\2\144\10\145\3\246"+
    "\1\145\3\246\1\0\2\145\1\246\11\145\1\0\12\145"+
    "\1\0\20\145\1\0\6\145\3\144\1\145\1\144\3\247"+
    "\1\144\3\247\1\215\2\144\1\247\1\144\1\145\2\144"+
    "\1\145\2\144\2\145\1\0\12\144\1\215\17\144\1\145"+
    "\1\66\1\145\2\144\3\145\35\0\1\272\74\0\1\273"+
    "\73\0\1\274\72\0\1\275\116\0\1\276\60\0\1\277"+
    "\72\0\1\300\65\0\1\301\42\0\1\302\1\303\1\304"+
    "\1\303\2\304\1\303\1\304\2\303\2\304\16\0\1\303"+
    "\1\0\1\303\2\0\1\304\1\0\1\304\1\303\12\0"+
    "\1\303\16\0\14\304\16\0\1\304\1\0\1\304\2\0"+
    "\1\304\1\0\2\304\12\0\1\304\16\0\3\304\1\303"+
    "\3\304\2\303\3\304\16\0\1\303\1\0\1\303\2\0"+
    "\1\303\1\0\2\304\12\0\1\303\16\0\1\303\3\304"+
    "\2\303\2\304\1\303\3\304\16\0\1\304\1\0\1\303"+
    "\2\0\1\304\1\0\2\304\12\0\1\303\16\0\3\305"+
    "\1\303\3\305\1\303\1\304\1\303\1\305\1\304\16\0"+
    "\1\303\1\0\1\304\2\0\1\303\1\0\1\304\1\303"+
    "\12\0\1\304\16\0\7\304\1\303\4\304\16\0\1\304"+
    "\1\0\1\304\2\0\1\303\1\0\2\304\12\0\1\304"+
    "\47\0\1\306\102\0\1\307\64\0\1\310\74\0\1\311"+
    "\41\0\1\312\1\313\1\314\1\313\1\315\1\316\1\317"+
    "\5\313\16\0\1\313\1\0\1\313\2\0\1\313\1\0"+
    "\2\313\12\0\1\313\16\0\14\313\16\0\1\313\1\0"+
    "\1\313\2\0\1\313\1\0\2\313\12\0\1\313\55\0"+
    "\1\320\66\0\1\321\100\0\1\322\34\0\1\323\1\324"+
    "\1\325\1\324\2\325\1\324\1\325\2\324\2\325\16\0"+
    "\1\324\1\0\1\324\2\0\1\325\1\0\1\325\1\324"+
    "\12\0\1\324\16\0\14\325\16\0\1\325\1\0\1\325"+
    "\2\0\1\325\1\0\2\325\12\0\1\325\16\0\3\325"+
    "\1\324\3\325\2\324\3\325\16\0\1\324\1\0\1\324"+
    "\2\0\1\324\1\0\2\325\12\0\1\324\16\0\1\324"+
    "\3\325\2\324\2\325\1\324\3\325\16\0\1\325\1\0"+
    "\1\324\2\0\1\325\1\0\2\325\12\0\1\324\16\0"+
    "\3\326\1\324\3\326\1\324\1\325\1\324\1\326\1\325"+
    "\16\0\1\324\1\0\1\325\2\0\1\324\1\0\1\325"+
    "\1\324\12\0\1\325\16\0\7\325\1\324\4\325\16\0"+
    "\1\325\1\0\1\325\2\0\1\324\1\0\2\325\12\0"+
    "\1\325\50\0\1\327\100\0\1\330\34\0\1\331\1\332"+
    "\1\333\1\332\1\334\1\335\1\336\5\332\16\0\1\332"+
    "\1\0\1\332\2\0\1\332\1\0\2\332\12\0\1\332"+
    "\16\0\14\332\16\0\1\332\1\0\1\332\2\0\1\332"+
    "\1\0\2\332\12\0\1\332\56\0\1\337\33\0\1\340"+
    "\1\341\1\340\1\341\2\340\1\341\1\340\2\341\2\340"+
    "\16\0\1\341\1\0\1\341\2\0\1\340\1\0\1\340"+
    "\1\341\12\0\1\341\16\0\14\340\16\0\1\340\1\0"+
    "\1\340\2\0\1\340\1\0\2\340\12\0\1\340\16\0"+
    "\3\340\1\341\3\340\2\341\3\340\16\0\1\341\1\0"+
    "\1\341\2\0\1\341\1\0\2\340\12\0\1\341\16\0"+
    "\1\341\3\340\2\341\2\340\1\341\3\340\16\0\1\340"+
    "\1\0\1\341\2\0\1\340\1\0\2\340\12\0\1\341"+
    "\16\0\3\342\1\341\3\342\1\341\1\340\1\341\1\342"+
    "\1\340\16\0\1\341\1\0\1\340\2\0\1\341\1\0"+
    "\1\340\1\341\12\0\1\340\16\0\7\340\1\341\4\340"+
    "\16\0\1\340\1\0\1\340\2\0\1\341\1\0\2\340"+
    "\12\0\1\340\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\10\0\2\1\13\0\1\11\1\1\1\0"+
    "\1\1\1\11\1\0\2\1\1\0\1\11\1\1\7\11"+
    "\1\1\2\11\6\1\1\11\2\1\2\11\2\1\4\11"+
    "\14\0\1\11\6\0\1\11\4\0\2\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\2\11\4\1\6\0"+
    "\1\11\10\0\3\11\11\0\2\1\1\0\4\1\4\0"+
    "\1\11\3\0\3\11\5\0\1\11\5\1\1\0\1\1"+
    "\1\11\1\0\1\11\2\0\2\11\13\0\1\11\1\0"+
    "\2\11\1\0\1\11\2\0\4\1\1\0\1\11\12\0"+
    "\1\11\4\1\1\0\1\11\6\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

private Context.Token lval;

private StringBuffer currentString;

private boolean stringBufferRequiresQuotes;

private boolean stringBufferIsAllIntChars;

private byte[] utf8Buffer = new byte[8];

private CompoundDimension compoundDimension;

private boolean startingNewState;

private boolean inDimension;

private boolean inContext;

public static final int SEQUENCE = 0;

public static final int ID = 1;

public static final int COUNT = 2;

private int integersType;

public static final int AETP_CLIENT_LEXER = 0;

public static final int AETP_SERVER_LEXER = 1;

private int type;

public void setClientType
()
{
  type = AETP_CLIENT_LEXER;
}

public void setServerType
()
{
  type = AETP_SERVER_LEXER;
}

public void setSequenceIntegersType
()
{
  integersType = SEQUENCE;
}

public void setIdIntegersType
()
{
  integersType = ID;
}

public void setCountIntegersType
()
{
  integersType = COUNT;
}

public void beginInContext
()
{
  startingNewState = true;
  inDimension = false;
  inContext = true;
}

public void beginInDimension
()
{
  startingNewState = true;
  inDimension = true;
  inContext = false;
}

public void beginInToken
()
{
  startingNewState = true;
  inDimension = false;
  inContext = false;
}

private void addToCompoundDimension
(Dimension newDimension)
{
  if (compoundDimension == null) {
    compoundDimension = new CompoundDimension();
  }
  compoundDimension.append(newDimension);
}

/**
 * Get a Context.Token.
 *
 * @param token A Context.Token to populate.
 * @return The type of the token.
 */
public int getToken
(Context.Token token)
  throws IOException, AEPException
{
  int returnValue;

  lval = token;
  if (startingNewState) {
    if (inDimension) {
      yybegin(IN_DIMENSION);
    } else if (inContext) {
      yybegin(IN_CONTEXT);
    } else {
      yybegin(IN_TOKEN);
    }
    startingNewState = false;
  }
  returnValue = yylex();
  if (returnValue == Context.Token.ERROR) {
    if (token.getValue() != null) {
      throw new AEPException(
        "Parsed error token in AETPLexer with content \"" +
        token.getValue() + "\""
      );
    } else {
      throw new AEPException(
        "Parsed error token in AETPLexer (null content)"
      );
    }
  }
  return returnValue;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AETPLexer(java.io.Reader in) {
  
startingNewState = false;

inDimension = false;

inContext = false;

integersType = SEQUENCE;

type = -1;

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AETPLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException, AEPException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { currentString.append(yytext());
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
          }
        case 73: break;
        case 16: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\r");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\r");
  }
          }
        case 74: break;
        case 50: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setDeny();
  } else {
    return ((AETPServer.LexerToken)lval).setError(yytext());
  }
          }
        case 75: break;
        case 27: 
          { currentString = new StringBuffer();
  yybegin(IN_CONTEXT_BINARY_STRING);
          }
        case 76: break;
        case 25: 
          { return lval.setRSquare();
          }
        case 77: break;
        case 66: 
          { try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), 2, 2
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
    stringBufferIsAllIntChars = false;
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 78: break;
        case 19: 
          { yybegin(AFTER_STRING);
          }
        case 79: break;
        case 30: 
          { return lval.setBaseValue(new OmegaBaseValue());
          }
        case 80: break;
        case 49: 
          { return lval.setDashDashDash();
          }
        case 81: break;
        case 71: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setServerDisconnect();
  } else {
    return ((AETPServer.LexerToken)lval).setClientDisconnect();
  }
          }
        case 82: break;
        case 37: 
          { addToCompoundDimension(new StringDimension(
    yytext().substring(0, yytext().length() - 1), false)
  );
          }
        case 83: break;
        case 21: 
          { yypushback(1);
  if (inDimension) {
    // No ':', so that's the end of the compound dimension:
    CompoundDimension dimension = compoundDimension;

    yybegin(IN_TOKEN);
    inDimension = false;
    inContext = false;
    compoundDimension = null;
    if (type == AETP_CLIENT_LEXER) {
      return ((AETPClient.LexerToken)lval).setCompoundDimension(dimension);
    } else {
      return ((AETPServer.LexerToken)lval).setCompoundDimension(dimension);
    }
  } else if (inContext) {
    yybegin(IN_CONTEXT);
    return lval.setBaseValue(
      new StringBaseValue(currentString.toString())
    );
  } else {
    yybegin(IN_TOKEN);
    inDimension = false;
    inContext = false;
    if (type == AETP_CLIENT_LEXER) {
      return ((AETPClient.LexerToken)lval).setText(currentString.toString());
    } else {
      return ((AETPServer.LexerToken)lval).setText(currentString.toString());
    }
  }
          }
        case 84: break;
        case 26: 
          { return lval.setDash();
          }
        case 85: break;
        case 22: 
          { if (inDimension) {
    yybegin(IN_DIMENSION);
    addToCompoundDimension(new StringDimension(
      currentString.toString(),
      stringBufferRequiresQuotes||stringBufferIsAllIntChars
    ));
  } else if (inContext) {
    yybegin(IN_CONTEXT);
    return lval.setStringDimension(new StringDimension(
      currentString.toString(),
      stringBufferRequiresQuotes||stringBufferIsAllIntChars
    ));
  } else {
    if (type == AETP_CLIENT_LEXER) {
      return ((AETPClient.LexerToken)lval).setError(":");
    } else {
      return ((AETPServer.LexerToken)lval).setError(":");
    }
  }
          }
        case 86: break;
        case 46: 
          { yybegin(IN_DIMENSION);
  // So we can reuse the string rules:
  inDimension = true;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setDimKeyword();
  } else {
    return ((AETPServer.LexerToken)lval).setDimKeyword();
  }
          }
        case 87: break;
        case 13: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\t");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\t");
  }
          }
        case 88: break;
        case 18: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\a");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\a");
  }
          }
        case 89: break;
        case 63: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setAssign();
  } else {
    return ((AETPServer.LexerToken)lval).setAssign();
  }
          }
        case 90: break;
        case 70: 
          { if (type == AETP_SERVER_LEXER) {
    return ((AETPServer.LexerToken)lval).setPostFence();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 91: break;
        case 35: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setText("");
  } else {
    return ((AETPServer.LexerToken)lval).setText("");
  }
          }
        case 92: break;
        case 52: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    yybegin(IN_TOKEN);
    return ((AETPServer.LexerToken)lval).setJoin();
  }
          }
        case 93: break;
        case 55: 
          { try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), 2, 1
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
    stringBufferIsAllIntChars = false;
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 94: break;
        case 57: 
          { try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), yytext().length() - 2, 1
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 95: break;
        case 9: 
          { currentString.append(yytext());
  stringBufferIsAllIntChars = false;
          }
        case 96: break;
        case 15: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\b");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\b");
  }
          }
        case 97: break;
        case 12: 
          { currentString.append(yytext());
          }
        case 98: break;
        case 39: 
          { char escapedChar = yytext().charAt(1);
  switch (escapedChar) {
  case 'n':
    currentString.append('\n');
    break;
  case 't':
    currentString.append('\t');
    break;
  case 'b':
    currentString.append('\b');
    break;
  case 'r':
    currentString.append('\r');
    break;
  case 'f':
    currentString.append('\f');
    break;
  case 'v':
    currentString.append('\013');
    break;
  case 'a':
    currentString.append('\007');
    break;
  case '\\':
    currentString.append('\\');
    break;
  case '"':
    currentString.append('\"');
    break;
  default:
    currentString.append(escapedChar);
    break;
  }
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
          }
        case 99: break;
        case 58: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    yybegin(IN_TOKEN);
    return ((AETPServer.LexerToken)lval).setSynch();
  }
          }
        case 100: break;
        case 68: 
          { if (type == AETP_SERVER_LEXER) {
    return ((AETPServer.LexerToken)lval).setPreFence();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 101: break;
        case 6: 
          { CompoundDimension dimension;

  addToCompoundDimension(new StringDimension(yytext(), false));
  dimension = compoundDimension;
  yybegin(IN_TOKEN);
  inDimension = false;
  compoundDimension = null;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setCompoundDimension(dimension);
  } else {
    return ((AETPServer.LexerToken)lval).setCompoundDimension(dimension);
  }
          }
        case 102: break;
        case 43: 
          { return lval.setBaseValue(new StringBaseValue());
          }
        case 103: break;
        case 60: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setApply();
  } else {
    return ((AETPServer.LexerToken)lval).setApply();
  }
          }
        case 104: break;
        case 24: 
          { currentString = new StringBuffer();
  stringBufferRequiresQuotes = false;
  stringBufferIsAllIntChars = true;
  yybegin(IN_STRING);
          }
        case 105: break;
        case 61: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    yybegin(IN_TOKEN);
    return ((AETPServer.LexerToken)lval).setLeave();
  }
          }
        case 106: break;
        case 10: 
          { currentString.append(' ');
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
          }
        case 107: break;
        case 65: 
          { if (type == AETP_SERVER_LEXER) {
    return ((AETPServer.LexerToken)lval).setClient();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 108: break;
        case 45: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setAck();
  } else {
    return ((AETPServer.LexerToken)lval).setError(yytext());
  }
          }
        case 109: break;
        case 14: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\v");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\v");
  }
          }
        case 110: break;
        case 8: 
          { yybegin(IN_STRING);
          }
        case 111: break;
        case 40: 
          { return lval.setStringDimension(new StringDimension(
    yytext().substring(0, yytext().length() - 1), false
  ));
          }
        case 112: break;
        case 72: 
          { try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), 2, 4
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
    stringBufferIsAllIntChars = false;
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 113: break;
        case 64: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    return ((AETPServer.LexerToken)lval).setNotify();
  }
          }
        case 114: break;
        case 11: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\n");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\n");
  }
          }
        case 115: break;
        case 3: 
          { switch (integersType) {
  case SEQUENCE:
    try {
      if (type == AETP_CLIENT_LEXER) {
        return ((AETPClient.LexerToken)lval).setSequence(new Long(yytext()));
      } else {
        return ((AETPServer.LexerToken)lval).setSequence(new Long(yytext()));
      }
    } catch (NumberFormatException e) {
      throw new AEPException("Invalid sequence string \"" + yytext() + "\"");
    }
  case ID:
    try {
      if (type == AETP_CLIENT_LEXER) {
        return ((AETPClient.LexerToken)lval).setId(new Long(yytext()));
      } else {
        return ((AETPServer.LexerToken)lval).setId(new Long(yytext()));
      }
    } catch (NumberFormatException e) {
      throw new AEPException("Invalid id string \"" + yytext() + "\"");
    }
  case COUNT:
    try {
      if (type == AETP_CLIENT_LEXER) {
        return ((AETPClient.LexerToken)lval).setCount(new Integer(yytext()));
      } else {
        // Not yet used in server:
        return ((AETPServer.LexerToken)lval).setError(yytext());
      }
    } catch (NumberFormatException e) {
      throw new AEPException("Invalid count string \"" + yytext() + "\"");
    }
  }
          }
        case 116: break;
        case 41: 
          { yypushback(1);
  try {
    return lval.setBaseValue(new NumberBaseValue(
      Double.parseDouble(yytext())
    ));
  } catch (NumberFormatException e) {
    throw new AEPException(
      "Non-double-convertable NumberBaseValue string \"" + yytext() +
      "\" in Context/ContextOp parse"
    );
  }
          }
        case 117: break;
        case 7: 
          { CompoundDimension dimension;
  int value;

  try {
    value = Integer.parseInt(yytext());
  } catch (NumberFormatException e) {
    throw new AEPException(
      "Invalid integer dimension \"" + yytext() + "\""
    );
  }
  addToCompoundDimension(new IntegerDimension(value));
  dimension = compoundDimension;
  yybegin(IN_TOKEN);
  inDimension = false;
  compoundDimension = null;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setCompoundDimension(dimension);
  } else {
    return ((AETPServer.LexerToken)lval).setCompoundDimension(dimension);
  }
          }
        case 118: break;
        case 32: 
          { return lval.setRAngle();
          }
        case 119: break;
        case 48: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setExternalKeyword();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 120: break;
        case 36: 
          { yybegin(IN_CONTEXT);
  // So we can reuse the string rules:
  inContext = true;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    return ((AETPServer.LexerToken)lval).setOpKeyword();
  }
          }
        case 121: break;
        case 28: 
          { return lval.setPlus();
          }
        case 122: break;
        case 59: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setClear();
  } else {
    return ((AETPServer.LexerToken)lval).setClear();
  }
          }
        case 123: break;
        case 34: 
          { yypushback(1);
  yybegin(YYINITIAL);
  try {
    return lval.setBaseValue(
      BinaryBaseValue.hexStringToBinaryBaseValue(currentString.toString())
    );
  } catch (IntenseException e) {
    throw new AEPException(e);
  }
          }
        case 124: break;
        case 54: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setRootKeyword();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 125: break;
        case 69: 
          { try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), 2, 3
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
    stringBufferIsAllIntChars = false;
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 126: break;
        case 67: 
          { yybegin(IN_CONTEXT);
  // So we can reuse the string rules:
  inContext = true;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  } else {
    return ((AETPServer.LexerToken)lval).setContextKeyword();
  }
          }
        case 127: break;
        case 17: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setError("\\f");
  } else {
    return ((AETPServer.LexerToken)lval).setError("\\f");
  }
          }
        case 128: break;
        case 56: 
          { // Reserved Characters:
  try {
    int length = StringUtil.utf8EncodeHex(
      utf8Buffer, 0, yytext().getBytes(), yytext().length() - 2, 1
    );

    currentString.append(new String(utf8Buffer, 0, length, "UTF-8"));
    stringBufferRequiresQuotes = true;
    stringBufferIsAllIntChars = false;
  } catch (Exception e) {
    return lval.setError(
      "INTERNAL ERROR: Bad UTF-8 string " + yytext() + " : " + e.getMessage()
    );
  }
          }
        case 129: break;
        case 29: 
          { return lval.setBaseValue(new AlphaBaseValue());
          }
        case 130: break;
        case 47: 
          { if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setInternalKeyword();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 131: break;
        case 1: 
          { return lval.setError(yytext());
          }
        case 132: break;
        case 31: 
          { return lval.setLAngle();
          }
        case 133: break;
        case 23: 
          { return lval.setBaseValue(new StringBaseValue(yytext()));
          }
        case 134: break;
        case 53: 
          { if (type == AETP_SERVER_LEXER) {
    return ((AETPServer.LexerToken)lval).setSelf();
  } else {
    return ((AETPClient.LexerToken)lval).setError(yytext());
  }
          }
        case 135: break;
        case 38: 
          { int value;

  try {
    value = Integer.parseInt(yytext().substring(0, yytext().length() - 1));
  } catch (NumberFormatException e) {
    throw new AEPException("Invalid integer dimension \"" + yytext() + "\"");
  }
  addToCompoundDimension(new IntegerDimension(value));
          }
        case 136: break;
        case 44: 
          { return lval.setDashDash();
          }
        case 137: break;
        case 33: 
          { return lval.setLSquare();
          }
        case 138: break;
        case 4: 
          { currentString = new StringBuffer();
  stringBufferRequiresQuotes = false;
  stringBufferIsAllIntChars = true;
  yybegin(IN_STRING);
  continue;
          }
        case 139: break;
        case 62: 
          { if (type == AETP_CLIENT_LEXER) {
    yybegin(IN_TOKEN);
    return ((AETPClient.LexerToken)lval).setNotify();
  } else {
    return ((AETPServer.LexerToken)lval).setError(yytext());
  }
          }
        case 140: break;
        case 42: 
          { try {
    return lval.setIntegerDimension(new IntegerDimension(
      Integer.parseInt(yytext().substring(0, yytext().length() - 1))
    ));
  } catch (NumberFormatException e) {
    throw new AEPException(
      "Non-int-convertable IntegerDimension string \"" + yytext() + "\" in " +
      "Context/ContextOp parse"
    );
  }
          }
        case 141: break;
        case 51: 
          { yybegin(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setKick();
  } else {
    return ((AETPServer.LexerToken)lval).setError(yytext());
  }
          }
        case 142: break;
        case 5: 
          { yybegin(YYINITIAL);
  inDimension = false;
  inContext = false;
  if (type == AETP_CLIENT_LEXER) {
    return ((AETPClient.LexerToken)lval).setBreak();
  } else {
    return ((AETPServer.LexerToken)lval).setBreak();
  }
          }
        case 143: break;
        case 2: 
          { 
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return lval.setEOF(); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

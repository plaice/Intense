#define yyFlexLexer aetp_yyFlexLexer
#define yywrap aetp_yywrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/intense/intense/libintense-aep/src/AETPLexer.cpp,v 1.3 2004/10/11 00:44:59 pws Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.hpp"
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int intense::aep::AETPLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
static yyconst short int yy_accept[262] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   78,   55,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   25,   77,   26,   42,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       31,   77,   77,   30,   29,   19,   15,   12,   10,    9,
       11,   14,   13,   17,   16,   18,   77,   23,   20,   20,
       21,   22,   65,   76,    1,   57,   58,   75,   68,   65,
       65,   42,   71,   72,   73,   74,   67,   66,   61,   60,
       77,   55,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   26,    0,    0,    0,    0,

        0,    0,   46,    0,    0,    0,    0,   30,    0,   29,
       30,   28,   29,   27,   29,   19,   17,   18,    2,    2,
       20,   65,   76,   63,    1,   56,   69,   76,   76,   64,
       64,   64,   65,   65,   65,   65,   62,   60,   59,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   47,   49,   50,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,    0,   70,   76,   76,
       76,   62,   65,    0,   76,   65,    0,    0,    0,    0,
       41,    0,   43,   39,    0,    0,    0,    0,    0,    0,
        0,    0,   48,   53,    5,    5,    3,    4,   76,   76,

        0,   37,    0,   38,    0,   44,    0,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
        0,   34,   54,    0,   35,    0,    0,    6,    6,    3,
        4,    0,   45,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   51,    7,    7,    3,    4,    0,   52,
        0,    0,    0,    0,    0,    0,   33,    8,    3,    4,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    3,    4,    5,
        6,    7,    8,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,    1,   10,   11,    1,    1,    1,    1,    1,
        1,    1,   12,    1,   13,   14,    1,   15,   16,   17,
       18,   16,   19,   16,   20,   21,   21,   22,   23,   24,
        1,   25,    1,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   42,   48,   49,   42,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,    1,    1,    1,   61,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    2,    2,    3,    4,    2,    2,    3,    5,    3,
        6,    6,    5,    7,    8,    8,    8,    8,    8,    8,
        8,    9,    1,    6,    6,    8,    8,    8,    8,   10,
        8,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    6,
        2,    6,   12,   13,   14,   14,   14,   14,   15,   14,
       12
    } ;

static yyconst short int yy_base[284] =
    {   0,
        0,    0,   61,    0,  122,    0,  183,    0,  241,  248,
      270,    0,  328,  385,  802,    0,  256, 1632,  322,  757,
      225,  743,  747,  747,  727,  714,  751,  352,  359, 1632,
      225,  298,  726,  708,  716,  714,  711,  299,  709,  713,
     1632,  401,  408,  415,  431,    0, 1632, 1632, 1632, 1632,
     1632, 1632, 1632,    0, 1632,  439,  693, 1632,  356,  387,
     1632, 1632,  459,    0,  465,  727, 1632, 1632,  467,  520,
      474,  580, 1632, 1632, 1632, 1632,    0,    0, 1632,  493,
        0,    0,  495,  690,  683,  677,  690,  672,  663,  671,
      676,  674,  654,  658, 1632,  498,  433,  656,  656,  647,

      645,  644, 1632,  644,  655,  641,  643,  579,  588,  595,
        0, 1632,    0, 1632,    0,    0,    0,  603, 1632,  610,
      630,  640,    0, 1632,  646, 1632,  646,  698,  754,  812,
        0, 1632,  872,    0,  648,  655, 1632,  674,    0, 1632,
      621,  623,  630,  603,  620,  606,  608,  593,  603,  608,
      602,  581, 1632, 1632, 1632,  558,  546,  559,  543,  554,
      714,  919,    0,  669,  965,  723,  322,    0,  770,  780,
        0, 1632,  812,  820,  827, 1012,    0,  535,  479,  466,
     1632,  468, 1632, 1632,  477,  475,  472,  440,  448,  446,
      445,  445, 1632, 1632,  727,    0,    0,    0,  835, 1058,

      851, 1632,  432, 1632,  425, 1632,  359, 1632,  362,  351,
      349,  367,  323, 1103,    0,  885, 1149,  898,  323, 1632,
      312, 1632, 1632,  296, 1632,  301,  306,  790,    0,    0,
        0,  238, 1632,  239,  232, 1195,    0,  902, 1241,  982,
      379,  226,  218, 1632,  889,    0,    0,    0,  202, 1632,
     1287,    0,  987, 1333, 1026,  380, 1632, 1632, 1632, 1632,
     1632, 1393, 1408, 1423, 1431, 1439, 1454, 1465, 1477, 1492,
     1507, 1515, 1523, 1538, 1546, 1554, 1562, 1577, 1584, 1592,
     1600, 1608, 1616
    } ;

static yyconst short int yy_def[284] =
    {   0,
      261,    1,  261,    3,  261,    5,  261,    7,  262,  262,
      261,   11,  263,  263,  261,  264,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  265,  265,  266,  267,  261,  261,  261,  261,
      261,  261,  261,  268,  261,  267,  269,  261,  261,  261,
      261,  261,  270,  271,  271,  261,  261,  261,  271,  261,
       70,  270,  261,  261,  261,  261,  271,  271,  261,  261,
      272,  264,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  265,  266,
       44,  261,  110,  261,  110,  267,  268,  267,  261,  273,
      261,  270,  271,  261,  271,  261,  271,  274,  274,  270,
      271,  261,  270,   70,  133,   70,  261,  261,  275,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  276,  276,  261,  164,  276,  271,  271,  271,
      129,  261,   70,  261,  271,   70,  272,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  277,  277,  277,  277,  129,  129,

      278,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  279,  279,  261,  216,  279,  261,
      261,  261,  261,  261,  261,  261,  261,  280,  280,  280,
      280,  261,  261,  261,  261,  261,  281,  281,  261,  238,
      281,  261,  261,  261,  282,  282,  282,  282,  261,  261,
      261,  283,  283,  261,  251,  283,  261,  261,  261,  261,
        0,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261
    } ;

static yyconst short int yy_nxt[1694] =
    {   0,
       16,   16,   16,   17,   17,   16,   16,   17,   17,   18,
       16,   16,   18,   16,   18,   18,   18,   18,   18,   18,
       18,   18,   16,   16,   16,   19,   18,   20,   21,   18,
       18,   18,   18,   18,   22,   23,   24,   18,   25,   18,
       18,   18,   18,   26,   18,   18,   18,   18,   18,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   18,   18,   18,   17,   17,   18,   18,   17,   17,
       27,   18,   18,   28,   18,   29,   29,   29,   29,   29,
       29,   29,   18,   30,   18,   18,   31,   18,   32,   33,
       34,   18,   18,   18,   35,   18,   23,   18,   18,   36,

       37,   38,   18,   39,   40,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   17,   17,   18,   18,   17,
       17,   41,   18,   18,   42,   18,   43,   44,   44,   44,
       44,   44,   44,   18,   18,   18,   18,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   18,   18,   18,   18,   45,   45,   45,   45,   45,
       45,   45,   18,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   54,   54,   54,   46,   56,   56,   56,

       56,   56,   56,   56,   54,   46,   54,   54,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   54,   57,   54,   54,   46,   46,   46,   46,
       46,   46,   46,   54,   59,   60,  257,  250,   59,   59,
       61,   59,   60,  249,   88,   59,   59,   61,   89,   83,
       83,  244,   62,   83,   83,   85,  243,  242,   86,   62,
       63,   64,   64,   17,   17,   64,   64,   17,   65,   66,
       67,   68,   69,   63,   70,   71,   71,   71,   71,   71,
       71,   18,   72,   73,   74,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   75,
       64,   76,   77,   63,   63,   63,   63,   63,   63,   63,
       78,   80,   80,  235,   97,   80,   80,   98,  104,  234,
      233,  105,   81,   81,   81,   81,   81,   81,   81,   84,
      232,  197,  230,   81,   81,   81,   81,   81,   81,  121,
      121,  227,   85,  121,  121,   86,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      197,  230,   81,   81,   81,   81,   81,   81,   80,   80,
      121,  121,   80,   80,  121,  121,  226,  225,  224,   81,

       81,   81,   81,   81,   81,   81,  223,  222,  247,  259,
       81,   81,   81,   81,   81,   81,  108,  108,  108,  108,
      108,  108,  109,  109,  109,  109,  109,  109,  109,  111,
      111,  111,  111,  111,  111,  111,  112,  247,  259,   81,
       81,   81,   81,   81,   81,  113,  113,  113,  113,  113,
      113,  113,  114,  118,  118,  118,  118,  118,  118,  118,
      123,  123,  143,  221,  123,  123,  151,  123,   83,   83,
      220,  123,   83,  125,  213,  212,  211,  210,  209,  127,
      124,  128,  129,  129,  129,  129,  129,  129,  136,  136,
      136,  136,  136,  136,  136,  137,  138,  138,   83,   83,

      138,  138,   83,   83,  208,  207,  206,  205,  204,  123,
      203,  123,   96,   96,   96,   96,   96,   96,   96,  123,
      130,  131,  131,  132,  132,  131,  131,  132,  131,  132,
      132,  132,  131,  133,  134,  134,  134,  134,  134,  134,
      134,  124,  130,  132,  132,  130,  130,  130,  130,  135,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  132,
      131,  132,  131,  130,  130,  130,  130,  130,  135,  130,
      131,  123,  123,  202,  194,  123,  123,  193,  123,  192,
      191,  190,  123,  161,  161,  161,  161,  161,  161,  161,

      112,  124,  109,  109,  109,  109,  109,  109,  109,  113,
      113,  113,  113,  113,  113,  113,  114,  118,  118,  118,
      118,  118,  118,  118,  162,  189,  164,  165,  166,  167,
      123,  188,  123,  121,  121,  187,  186,  121,  121,  185,
      123,  123,  123,  184,  183,  123,  123,  182,  123,   83,
       83,  181,  123,   83,  125,  180,  179,  178,  168,  174,
      175,  124,  176,  176,  176,  176,  176,  176,  176,  136,
      136,  136,  136,  136,  136,  136,  137,  138,  138,  160,
      159,  138,  138,  197,  158,  197,  197,  157,  156,  155,
      123,  154,  123,  153,  152,  197,  150,  197,  149,  148,

      123,  132,  132,  147,  146,  132,  145,  132,  132,  132,
      144,  169,  128,  128,  128,  128,  128,  128,  128,  143,
      142,  132,  132,  141,  197,  140,  197,  170,  161,  161,
      161,  161,  161,  161,  161,  112,  126,  196,  120,  196,
      196,  214,  107,  216,  217,  218,  219,  132,  106,  132,
      197,  103,  197,  102,  101,  100,  170,  132,  132,   99,
       95,  132,   94,  132,  132,  132,   93,  169,  171,  171,
      171,  171,  171,  171,  171,  172,   92,  132,  132,  197,
       91,  197,   90,  170,  199,  199,  199,  199,  199,  199,
      199,  174,  175,   87,  200,  200,  200,  200,  200,  200,

      200,  261,  261,  132,  236,  132,  238,  239,  240,  241,
      261,  261,  170,  123,  123,  261,  261,  123,  123,  261,
      123,  261,  261,  261,  123,  122,  173,  173,  173,  173,
      173,  173,  173,  124,  201,  201,  201,  201,  201,  201,
      201,  200,  200,  200,  200,  200,  200,  200,  123,  199,
      199,  199,  199,  199,  199,  199,  261,  261,  261,  261,
      261,  261,  123,  261,  123,  201,  201,  201,  201,  201,
      201,  201,  123,  123,  123,  261,  261,  123,  123,  261,
      123,  261,  261,  261,  123,  261,  173,  173,  173,  173,
      173,  173,  173,  124,  261,  261,  261,  261,  261,  230,

      261,  230,  230,  251,  261,  253,  254,  255,  256,  261,
      261,  230,  229,  230,  229,  229,  247,  261,  247,  247,
      261,  261,  123,  261,  123,  230,  261,  230,  247,  261,
      247,  261,  123,  195,  196,  196,  196,  196,  197,  197,
      230,  261,  230,  261,  197,  197,  197,  197,  196,  196,
      261,  261,  261,  261,  230,  261,  230,  247,  261,  247,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  197,  197,  197,  197,  196,  196,  198,
      198,  198,  198,  198,  198,  198,  261,  261,  261,  261,
      197,  196,  197,  196,  197,  196,  246,  261,  246,  246,

      261,  259,  261,  259,  259,  261,  261,  261,  261,  247,
      261,  247,  261,  259,  261,  259,  261,  261,  261,  197,
      196,  197,  196,  197,  196,  122,  176,  176,  176,  176,
      176,  176,  176,  261,  261,  261,  261,  261,  247,  261,
      247,  122,  259,  261,  259,  258,  258,  261,  261,  261,
      261,  258,  261,  261,  261,  259,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      122,  123,  200,  200,  200,  200,  200,  200,  200,  261,
      258,  261,  261,  261,  259,  261,  261,  123,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  123,  228,  229,  229,
      229,  229,  230,  230,  261,  261,  261,  261,  230,  230,
      230,  230,  229,  229,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  230,  230,  230,
      230,  229,  229,  231,  231,  231,  231,  231,  231,  231,
      261,  261,  261,  261,  230,  229,  230,  229,  230,  229,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  230,  229,  230,  229,  230,  229,  245,
      246,  246,  246,  246,  247,  247,  261,  261,  261,  261,
      247,  247,  247,  247,  246,  246,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  247,
      247,  247,  247,  246,  246,  248,  248,  248,  248,  248,
      248,  248,  261,  261,  261,  261,  247,  246,  247,  246,
      247,  246,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  247,  246,  247,  246,  247,

      246,  258,  258,  258,  258,  258,  259,  259,  261,  261,
      261,  261,  259,  259,  259,  259,  258,  258,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  259,  259,  259,  259,  258,  258,  260,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  259,  258,
      259,  258,  259,  258,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  259,  258,  259,
      258,  259,  258,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   82,   82,  261,  261,  261,   82,   82,
      261,  261,  261,  261,   82,   82,   82,   82,  110,  261,
      110,  110,  261,  110,  110,  110,  115,  115,  115,  115,
      261,  115,  115,  115,  116,  261,  261,  261,  261,  261,
      116,  116,  261,  116,  116,  261,  116,  116,  116,  117,
      117,  261,  261,  117,  261,  261,  117,  119,  119,  119,
      261,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  122,  122,  261,  261,  122,  261,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  123,  123,  261,
      261,  123,  261,  123,  123,  261,  123,  123,  123,  123,
      123,  123,  139,  261,  139,  261,  261,  261,  139,  139,
      163,  261,  163,  261,  261,  261,  163,  163,  131,  131,
      131,  131,  131,  131,  131,  131,  261,  131,  131,  131,
      131,  131,  131,  177,  261,  177,  261,  261,  261,  177,
      177,  196,  261,  196,  261,  261,  261,  196,  196,  215,
      261,  215,  261,  261,  261,  215,  215,  132,  132,  132,
      132,  132,  132,  261,  132,  261,  261,  132,  132,  132,
      132,  229,  261,  229,  261,  261,  261,  229,  229,  237,

      261,  237,  261,  261,  261,  237,  237,  246,  261,  246,
      261,  261,  261,  246,  246,  252,  261,  252,  261,  261,
      261,  252,  252,  258,  261,  258,  261,  261,  261,  258,
      258,   15,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261

    } ;

static yyconst short int yy_chk[1694] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9,    9,  249,  243,    9,    9,
        9,   10,   10,  242,   21,   10,   10,   10,   21,   17,
       17,  235,    9,   17,   17,   31,  234,  232,   31,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,  227,   32,   13,   13,   32,   38,  226,
      224,   38,   13,   13,   13,   13,   13,   13,   13,   19,
      221,  167,  219,   13,   13,   13,   13,   13,   13,   59,
       59,  213,   19,   59,   59,   19,   28,   28,   28,   28,
       28,   28,   28,   29,   29,   29,   29,   29,   29,   29,
      167,  219,   13,   13,   13,   13,   13,   13,   14,   14,
       60,   60,   14,   14,   60,   60,  212,  211,  210,   14,

       14,   14,   14,   14,   14,   14,  209,  207,  241,  256,
       14,   14,   14,   14,   14,   14,   42,   42,   42,   42,
       42,   42,   43,   43,   43,   43,   43,   43,   43,   44,
       44,   44,   44,   44,   44,   44,   44,  241,  256,   14,
       14,   14,   14,   14,   14,   45,   45,   45,   45,   45,
       45,   45,   45,   56,   56,   56,   56,   56,   56,   56,
       63,   63,   97,  205,   63,   63,   97,   63,   65,   65,
      203,   63,   65,   65,  192,  191,  190,  189,  188,   69,
       63,   69,   69,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   71,   71,   71,   80,   80,   83,   83,

       80,   80,   83,   83,  187,  186,  185,  182,  180,   63,
      179,   63,   96,   96,   96,   96,   96,   96,   96,   63,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   72,   72,  178,  160,   72,   72,  159,   72,  158,
      157,  156,   72,  108,  108,  108,  108,  108,  108,  108,

      108,   72,  109,  109,  109,  109,  109,  109,  109,  110,
      110,  110,  110,  110,  110,  110,  110,  118,  118,  118,
      118,  118,  118,  118,  120,  152,  120,  120,  120,  120,
       72,  151,   72,  121,  121,  150,  149,  121,  121,  148,
       72,  122,  122,  147,  146,  122,  122,  145,  122,  125,
      125,  144,  122,  125,  125,  143,  142,  141,  127,  135,
      135,  122,  135,  135,  135,  135,  135,  135,  135,  136,
      136,  136,  136,  136,  136,  136,  136,  138,  138,  107,
      106,  138,  138,  164,  105,  164,  164,  104,  102,  101,
      122,  100,  122,   99,   98,  164,   94,  164,   93,   92,

      122,  128,  128,   91,   90,  128,   89,  128,  128,  128,
       88,  128,  128,  128,  128,  128,  128,  128,  128,   87,
       86,  128,  128,   85,  164,   84,  164,  128,  161,  161,
      161,  161,  161,  161,  161,  161,   66,  166,   57,  166,
      166,  195,   40,  195,  195,  195,  195,  128,   39,  128,
      166,   37,  166,   36,   35,   34,  128,  129,  129,   33,
       27,  129,   26,  129,  129,  129,   25,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   24,  129,  129,  166,
       23,  166,   22,  129,  169,  169,  169,  169,  169,  169,
      169,  170,  170,   20,  170,  170,  170,  170,  170,  170,

      170,   15,    0,  129,  228,  129,  228,  228,  228,  228,
        0,    0,  129,  130,  130,    0,    0,  130,  130,    0,
      130,    0,    0,    0,  130,  173,  173,  173,  173,  173,
      173,  173,  173,  130,  174,  174,  174,  174,  174,  174,
      174,  175,  175,  175,  175,  175,  175,  175,  199,  199,
      199,  199,  199,  199,  199,  199,  199,    0,    0,    0,
        0,    0,  130,    0,  130,  201,  201,  201,  201,  201,
      201,  201,  130,  133,  133,    0,    0,  133,  133,    0,
      133,    0,    0,    0,  133,    0,  133,  133,  133,  133,
      133,  133,  133,  133,    0,    0,    0,    0,    0,  216,

        0,  216,  216,  245,    0,  245,  245,  245,  245,    0,
        0,  216,  218,  216,  218,  218,  238,    0,  238,  238,
        0,    0,  133,    0,  133,  218,    0,  218,  238,    0,
      238,    0,  133,  162,  162,  162,  162,  162,  162,  162,
      216,    0,  216,    0,  162,  162,  162,  162,  162,  162,
        0,    0,    0,    0,  218,    0,  218,  238,    0,  238,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  162,  162,  162,  162,  162,  162,  165,
      165,  165,  165,  165,  165,  165,    0,    0,    0,    0,
      165,  165,  165,  165,  165,  165,  240,    0,  240,  240,

        0,  253,    0,  253,  253,    0,    0,    0,    0,  240,
        0,  240,    0,  253,    0,  253,    0,    0,    0,  165,
      165,  165,  165,  165,  165,  176,  176,  176,  176,  176,
      176,  176,  176,    0,    0,    0,    0,    0,  240,    0,
      240,  176,  253,    0,  253,  255,  255,    0,    0,    0,
        0,  255,    0,    0,    0,  255,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      255,    0,    0,    0,  255,    0,    0,  200,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  200,  214,  214,  214,
      214,  214,  214,  214,    0,    0,    0,    0,  214,  214,
      214,  214,  214,  214,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  214,  214,  214,
      214,  214,  214,  217,  217,  217,  217,  217,  217,  217,
        0,    0,    0,    0,  217,  217,  217,  217,  217,  217,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  217,  217,  217,  217,  217,  217,  236,
      236,  236,  236,  236,  236,  236,    0,    0,    0,    0,
      236,  236,  236,  236,  236,  236,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
      236,  236,  236,  236,  236,  239,  239,  239,  239,  239,
      239,  239,    0,    0,    0,    0,  239,  239,  239,  239,
      239,  239,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  239,  239,  239,  239,  239,

      239,  251,  251,  251,  251,  251,  251,  251,    0,    0,
        0,    0,  251,  251,  251,  251,  251,  251,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  251,  251,  251,  251,  251,  251,  254,  254,  254,
      254,  254,  254,  254,    0,    0,    0,    0,  254,  254,
      254,  254,  254,  254,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  254,  254,  254,
      254,  254,  254,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  264,  264,    0,    0,    0,  264,  264,
        0,    0,    0,    0,  264,  264,  264,  264,  265,    0,
      265,  265,    0,  265,  265,  265,  266,  266,  266,  266,
        0,  266,  266,  266,  267,    0,    0,    0,    0,    0,
      267,  267,    0,  267,  267,    0,  267,  267,  267,  268,
      268,    0,    0,  268,    0,    0,  268,  269,  269,  269,
        0,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  270,  270,    0,    0,  270,    0,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  271,  271,    0,
        0,  271,    0,  271,  271,    0,  271,  271,  271,  271,
      271,  271,  272,    0,  272,    0,    0,    0,  272,  272,
      273,    0,  273,    0,    0,    0,  273,  273,  274,  274,
      274,  274,  274,  274,  274,  274,    0,  274,  274,  274,
      274,  274,  274,  275,    0,  275,    0,    0,    0,  275,
      275,  276,    0,  276,    0,    0,    0,  276,  276,  277,
        0,  277,    0,    0,    0,  277,  277,  278,  278,  278,
      278,  278,  278,    0,  278,    0,    0,  278,  278,  278,
      278,  279,    0,  279,    0,    0,    0,  279,  279,  280,

        0,  280,    0,    0,    0,  280,  280,  281,    0,  281,
        0,    0,    0,  281,  281,  282,    0,  282,    0,    0,
        0,  282,  282,  283,    0,  283,    0,    0,    0,  283,
      283,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "AETPLexer.lpp"
#define INITIAL 0
/*
 ******************************************************************************
 * AETPLexer.lpp : Lexer for AETPClient AEPClient::Tokens.
 *
 * Copyright 2001, 2004 Paul Swoboda.
 *
 * This file is part of the Intense project.
 *
 * Intense is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Intense is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Intense; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 *
 ******************************************************************************
 */
#line 34 "AETPLexer.lpp"


#include <list>
#include <map>
#include <queue>
#include <string>
#include <sstream>
#include <stdexcept>
#include <stdlib.h>
#include <intense-io.hpp>
#include <intense.hpp>
#include "AEPCommon.hpp"
#include "AEPClient.hpp"
#include "AEPServer.hpp"
#include "AETPLexer.hpp"


using namespace std;
using namespace intense;
using namespace intense::io;
using namespace intense::aep;


/*
#define VERSION_YYSTYPE char*
*/
#define LVAL ((Context::Token*)lval)
#define CLIENT_LVAL ((AETPClient::LexerToken*)lval)
#define SERVER_LVAL ((AETPServer::LexerToken*)lval)
#define yylex aetp_yylex


/* The prototype/definition for our definition of the yywrap() routine: */
#define aetp_yywrap() 1


#define IN_TOKEN 1
#define IN_DIMENSION 2
#define IN_STRING 3
#define AFTER_STRING 4

#define IN_CONTEXT 5
#define IN_CONTEXT_BINARY_STRING 6

#line 867 "lex.AETPLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 77 "AETPLexer.lpp"


  if (startingNewState) {
    if (inDimension) {
      BEGIN(IN_DIMENSION);
    } else if (inContext) {
      BEGIN(IN_CONTEXT);
    } else {
      BEGIN(IN_TOKEN);
    }
    startingNewState = false;
  }

#line 1008 "lex.AETPLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 262 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1632 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "AETPLexer.lpp"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "AETPLexer.lpp"
{
  switch ((YYText())[1]) {
  case 'n':
    addToString("\n");
    break;
  case 't':
    addToString("\t");
    break;
  case 'v':
    addToString("\v");
    break;
  case 'b':
    addToString("\b");
    break;
  case 'r':
    addToString("\r");
    break;
  case 'f':
    addToString("\f");
    break;
  case 'a':
    addToString("\a");
    break;
  case '\\':
    addToString("\\");
    break;
  case '"':
    addToString("\"");
    break;
  default:
    addToString(&((YYText())[1]));
    break;
  }
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 129 "AETPLexer.lpp"
{
  // Reserved Characters:
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + strlen(YYText()) - 2, 1
  )] = 0;
  addToString(utf8Buffer);
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 139 "AETPLexer.lpp"
{
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + strlen(YYText()) - 2, 1
  )] = 0;
  addToString(utf8Buffer);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 146 "AETPLexer.lpp"
{
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + 2, 1
  )] = 0;
  addToString(utf8Buffer);
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 154 "AETPLexer.lpp"
{
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + 2, 2
  )] = 0;
  addToString(utf8Buffer);
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 162 "AETPLexer.lpp"
{
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + 2, 3
  )] = 0;
  addToString(utf8Buffer);
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 170 "AETPLexer.lpp"
{
  utf8Buffer[StringUtil::utf8EncodeHex(
    utf8Buffer, ((char*)(YYText())) + 2, 4
  )] = 0;
  addToString(utf8Buffer);
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 178 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\n")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\n")));
  }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 186 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\t")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\t")));
  }
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 194 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\v")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\v")));
  }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 202 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\b")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\b")));
  }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 210 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\r")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\r")));
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 218 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\f")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\f")));
  }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 226 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string("\\a")));
  } else {
    return SERVER_LVAL->setError(*(new string("\\a")));
  }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 234 "AETPLexer.lpp"
{
  BEGIN(AFTER_STRING);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 238 "AETPLexer.lpp"
{
  addToString(YYText());
  stringBufferRequiresQuotes = true;
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 244 "AETPLexer.lpp"
{
  addToString(YYText());
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 248 "AETPLexer.lpp"
{
  addToString(YYText());
  stringBufferIsAllIntChars = false;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 253 "AETPLexer.lpp"
{
  continue;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 257 "AETPLexer.lpp"
{
  BEGIN(IN_STRING); continue;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 261 "AETPLexer.lpp"
{
  if (inDimension) {
    BEGIN(IN_DIMENSION);
    addToCompoundDimension(*(new StringDimension(
      stringBuffer.str().data(),
      stringBufferRequiresQuotes||stringBufferIsAllIntChars
    )));
  } else if (inContext) {
    BEGIN(IN_CONTEXT);
    return LVAL->setStringDimension(
      stringBuffer.str().data(),
      stringBufferRequiresQuotes||stringBufferIsAllIntChars
    );
  } else {
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setError(*(new string(":")));
    } else {
      return SERVER_LVAL->setError(*(new string(":")));
    }
  }
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 283 "AETPLexer.lpp"
{
  unput((YYText())[0]);
  if (inDimension) {
    // No ':', so that's the end of the compound dimension:
    CompoundDimension* dimension = compoundDimension;

    BEGIN(IN_TOKEN);
    inDimension = false;
    inContext = false;
    resetCompoundDimension();
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setCompoundDimension(*dimension);
    } else {
      return SERVER_LVAL->setCompoundDimension(*dimension);
    }
  } else if (inContext) {
    BEGIN(IN_CONTEXT);
    return LVAL->setBaseValue(
      *(new intense::StringBaseValue(stringBuffer.str().data()))
    );
  } else {
    BEGIN(IN_TOKEN);
    inDimension = false;
    inContext = false;
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setText(stringBuffer.str().data());
    } else {
      return SERVER_LVAL->setText(stringBuffer.str().data());
    }
  }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 315 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setText("");
  } else {
    return SERVER_LVAL->setText("");
  }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 323 "AETPLexer.lpp"
{
  stringReset();
  BEGIN(IN_STRING);
  continue;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 329 "AETPLexer.lpp"
{
  switch (integersType) {
  case SEQUENCE:
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setSequence(atoll(YYText()));
    } else {
      return SERVER_LVAL->setSequence(atoll(YYText()));
    }
    break;
  case ID:
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setId(atoll(YYText()));
    } else {
      return SERVER_LVAL->setId(atoll(YYText()));
    }
    break;
  case COUNT:
    if (type == AETP_CLIENT_LEXER) {
      return CLIENT_LVAL->setCount(atoi(YYText()));
    } else {
      // Not yet used in server:
      return SERVER_LVAL->setError(*(new string(YYText())));
    }
    break;
  }
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 356 "AETPLexer.lpp"
{
  ((char*)YYText())[strlen(YYText()) - 1] = 0;
  addToCompoundDimension(*(new StringDimension(YYText(), false)));
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 361 "AETPLexer.lpp"
{
  int value;

  ((char*)YYText())[strlen(YYText()) - 1] = 0;
  value = atol(YYText());
  addToCompoundDimension(*(new IntegerDimension(value)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 369 "AETPLexer.lpp"
{
  CompoundDimension* dimension;

  addToCompoundDimension(*(new StringDimension(YYText(), false)));
  dimension = compoundDimension;
  BEGIN(IN_TOKEN);
  inDimension = false;
  resetCompoundDimension();
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setCompoundDimension(*dimension);
  } else {
    return SERVER_LVAL->setCompoundDimension(*dimension);
  }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 384 "AETPLexer.lpp"
{
  CompoundDimension* dimension;
  int value;

  value = atol(YYText());
  addToCompoundDimension(*(new IntegerDimension(value)));
  dimension = compoundDimension;
  BEGIN(IN_TOKEN);
  inDimension = false;
  resetCompoundDimension();
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setCompoundDimension(*dimension);
  } else {
    return SERVER_LVAL->setCompoundDimension(*dimension);
  }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 401 "AETPLexer.lpp"
{
  BEGIN(IN_STRING);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 405 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    BEGIN(IN_TOKEN);
    return SERVER_LVAL->setSynch();
  }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 414 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setServerDisconnect();
  } else {
    return SERVER_LVAL->setClientDisconnect();
  }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 423 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    BEGIN(IN_TOKEN);
    return CLIENT_LVAL->setNotify();
  } else {
    return SERVER_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 432 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    return SERVER_LVAL->setNotify();
  }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 440 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setAssign();
  } else {
    return SERVER_LVAL->setAssign();
  }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 449 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setApply();
  } else {
    return SERVER_LVAL->setApply();
  }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 458 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setClear();
  } else {
    return SERVER_LVAL->setClear();
  }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 467 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setKick();
  } else {
    return SERVER_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 476 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setAck();
  } else {
    return SERVER_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 485 "AETPLexer.lpp"
{
  BEGIN(IN_TOKEN);
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setDeny();
  } else {
    return SERVER_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 494 "AETPLexer.lpp"
{
  BEGIN(INITIAL);
  inDimension = false;
  inContext = false;
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setBreak();
  } else {
    return SERVER_LVAL->setBreak();
  }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 505 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    BEGIN(IN_TOKEN);
    return SERVER_LVAL->setJoin();
  }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 514 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    BEGIN(IN_TOKEN);
    return SERVER_LVAL->setLeave();
  }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 523 "AETPLexer.lpp"
{
  BEGIN(IN_CONTEXT);
  // So we can reuse the string rules:
  inContext = true;
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    return SERVER_LVAL->setContextKeyword();
  }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 534 "AETPLexer.lpp"
{
  BEGIN(IN_CONTEXT);
  // So we can reuse the string rules:
  inContext = true;
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  } else {
    return SERVER_LVAL->setOpKeyword();
  }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 545 "AETPLexer.lpp"
{
  BEGIN(IN_DIMENSION);
  // So we can reuse the string rules:
  inDimension = true;
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setDimKeyword();
  } else {
    return SERVER_LVAL->setDimKeyword();
  }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 556 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setRootKeyword();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 564 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setExternalKeyword();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 572 "AETPLexer.lpp"
{
  if (type == AETP_CLIENT_LEXER) {
    return CLIENT_LVAL->setInternalKeyword();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 580 "AETPLexer.lpp"
{
  if (type == AETP_SERVER_LEXER) {
    return SERVER_LVAL->setPreFence();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 588 "AETPLexer.lpp"
{
  if (type == AETP_SERVER_LEXER) {
    return SERVER_LVAL->setPostFence();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 596 "AETPLexer.lpp"
{
  if (type == AETP_SERVER_LEXER) {
    return SERVER_LVAL->setSelf();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 604 "AETPLexer.lpp"
{
  if (type == AETP_SERVER_LEXER) {
    return SERVER_LVAL->setClient();
  } else {
    return CLIENT_LVAL->setError(*(new string(YYText())));
  }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 612 "AETPLexer.lpp"
{
  return LVAL->setError(*(new string(YYText())));
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 616 "AETPLexer.lpp"
{
  return LVAL->setBaseValue(*(new intense::StringBaseValue("")));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 620 "AETPLexer.lpp"
{
  stringReset();
  BEGIN(IN_STRING); continue;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 625 "AETPLexer.lpp"
{
  stringReset();
  BEGIN(IN_CONTEXT_BINARY_STRING); continue;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 630 "AETPLexer.lpp"
{
  addToString((YYText()));
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 634 "AETPLexer.lpp"
{}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 636 "AETPLexer.lpp"
{
  unput((YYText())[0]);
  BEGIN(INITIAL);
  return LVAL->setBaseValue(*(stringToBinaryBaseValue()));
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 642 "AETPLexer.lpp"
{
  int value;

  ((char*)YYText())[strlen(YYText()) - 1] = 0;
  value = atol(YYText());
  return LVAL->setIntegerDimension(value);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 650 "AETPLexer.lpp"
{
  ((char*)YYText())[strlen(YYText()) - 1] = 0;
  return LVAL->setStringDimension(YYText(), false);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 655 "AETPLexer.lpp"
{
  double value;

  unput((YYText())[strlen(YYText()) - 1]);
  ((char*)YYText())[strlen(YYText()) - 1] = 0;
  value = strtod(YYText(), NULL);
  return LVAL->setBaseValue(*(new NumberBaseValue(value)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 664 "AETPLexer.lpp"
{
  return LVAL->setBaseValue(*(new StringBaseValue(YYText())));
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 668 "AETPLexer.lpp"
{
  return LVAL->setBaseValue(*(new AlphaBaseValue()));
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 672 "AETPLexer.lpp"
{
  return LVAL->setBaseValue(*(new OmegaBaseValue()));
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 676 "AETPLexer.lpp"
{
  return LVAL->setDash();
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 680 "AETPLexer.lpp"
{
  return LVAL->setDashDash();
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 684 "AETPLexer.lpp"
{
  return LVAL->setDashDashDash();
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 688 "AETPLexer.lpp"
{
  return LVAL->setLAngle();
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 692 "AETPLexer.lpp"
{
  return LVAL->setRAngle();
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 696 "AETPLexer.lpp"
{
  return LVAL->setLSquare();
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 700 "AETPLexer.lpp"
{
  return LVAL->setRSquare();
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 704 "AETPLexer.lpp"
{
  return LVAL->setPlus();
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 708 "AETPLexer.lpp"
{
  return LVAL->setError(*(new string(YYText())));
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_TOKEN):
case YY_STATE_EOF(IN_DIMENSION):
case YY_STATE_EOF(IN_STRING):
case YY_STATE_EOF(AFTER_STRING):
case YY_STATE_EOF(IN_CONTEXT):
case YY_STATE_EOF(IN_CONTEXT_BINARY_STRING):
#line 712 "AETPLexer.lpp"
{
  return LVAL->setEOF();
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 717 "AETPLexer.lpp"
ECHO;
	YY_BREAK
#line 1958 "lex.AETPLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 262 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 262 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 261);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 717 "AETPLexer.lpp"



AETPLexer::AETPLexer
(istream& is, Type type_)
  : yyFlexLexer(&is), stringBuffer(), compoundDimension(NULL),
    startingNewState(false), inDimension(false), inContext(false),
    integersType(SEQUENCE), type(type_)
{}


AETPLexer::~AETPLexer
()
{
  if (compoundDimension != NULL) {
    delete compoundDimension;
  }
}


int AETPLexer::getToken
(Context::Token& token)
{
  int returnValue;

  lval = (void*)&token;
  returnValue = aetp_yylex();
  if (returnValue == Context::Token::ERROR) {
    ostringstream oss;

    if (token.value.errorText != NULL) {
      oss << "Parsed error token in AETPLexer with content \""
          << *(token.value.errorText) << "\"";
    } else {
      oss << "Parsed error token in AETPLexer (NULL content)";
    }
    throw AEPException(oss.str());
  }
  return returnValue;
}


// Turn a # hex string into a BinaryBaseValue.
// We are relying on the rules above to give us an even number of characters
// in the range [0-9a-fA-F] (which is reasonable):
intense::BinaryBaseValue* AETPLexer::stringToBinaryBaseValue()
{
  BinaryBaseValue* value;
  char* marker;
  unsigned char* targetMarker;
  string binaryString = stringBuffer.str();

  value = new BinaryBaseValue(binaryString.length() / 2);
  targetMarker = (unsigned char*)(value->content);
  marker = (char*)(binaryString.data());
  while ((marker - binaryString.data()) < binaryString.length()) {
    unsigned char character;
    if ((*marker >= '0')&&(*marker <= '9')) {
      character = (*marker - '0') << 4;
    } else if ((*marker >= 'a')&&(*marker <= 'f')) {
      character = (*marker - 'a' + 10) << 4;
    } else if ((*marker >= 'A')&&(*marker <= 'F')) {
      character = (*marker - 'A' + 10) << 4;
    }
    marker++;
    if ((*marker >= '0')&&(*marker <= '9')) {
      character += *marker - '0';
    } else if ((*marker >= 'a')&&(*marker <= 'f')) {
      character += *marker - 'a' + 10;
    } else if ((*marker >= 'A')&&(*marker <= 'F')) {
      character += *marker - 'A' + 10;
    }
    marker++;
    *targetMarker++ = character;
  }
  return value;
}
